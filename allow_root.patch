diff --git a/src/backend/main/main.c b/src/backend/main/main.c
index e58e24a646..1748e87cc1 100644
--- a/src/backend/main/main.c
+++ b/src/backend/main/main.c
@@ -366,39 +366,4 @@ help(const char *progname)
 static void
 check_root(const char *progname)
 {
-#ifndef WIN32
-	if (geteuid() == 0)
-	{
-		write_stderr("\"root\" execution of the PostgreSQL server is not permitted.\n"
-					 "The server must be started under an unprivileged user ID to prevent\n"
-					 "possible system security compromise.  See the documentation for\n"
-					 "more information on how to properly start the server.\n");
-		exit(1);
-	}
-
-	/*
-	 * Also make sure that real and effective uids are the same. Executing as
-	 * a setuid program from a root shell is a security hole, since on many
-	 * platforms a nefarious subroutine could setuid back to root if real uid
-	 * is root.  (Since nobody actually uses postgres as a setuid program,
-	 * trying to actively fix this situation seems more trouble than it's
-	 * worth; we'll just expend the effort to check for it.)
-	 */
-	if (getuid() != geteuid())
-	{
-		write_stderr("%s: real and effective user IDs must match\n",
-					 progname);
-		exit(1);
-	}
-#else							/* WIN32 */
-	if (pgwin32_is_admin())
-	{
-		write_stderr("Execution of PostgreSQL by a user with administrative permissions is not\n"
-					 "permitted.\n"
-					 "The server must be started under an unprivileged user ID to prevent\n"
-					 "possible system security compromises.  See the documentation for\n"
-					 "more information on how to properly start the server.\n");
-		exit(1);
-	}
-#endif							/* WIN32 */
 }
diff --git a/src/bin/initdb/initdb.c b/src/bin/initdb/initdb.c
index 0945d70061..fb3151d17f 100644
--- a/src/bin/initdb/initdb.c
+++ b/src/bin/initdb/initdb.c
@@ -603,17 +603,6 @@ get_id(void)
 {
 	const char *username;
 
-#ifndef WIN32
-	if (geteuid() == 0)			/* 0 is root's uid */
-	{
-		pg_log_error("cannot be run as root");
-		fprintf(stderr,
-				_("Please log in (using, e.g., \"su\") as the (unprivileged) user that will\n"
-				  "own the server process.\n"));
-		exit(1);
-	}
-#endif
-
 	username = get_user_name_or_exit(progname);
 
 	return pg_strdup(username);
